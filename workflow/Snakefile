##### libraries #####
import os
import sys
import pandas as pd
import yaml
from snakemake.utils import min_version

min_version("7.15.2")

##### module name #####
module_name = "unsupervised_analysis"

##### setup report #####
report: os.path.join("report", "workflow.rst")

##### load config and sample annotation sheets #####
configfile: os.path.join("config", "config.yaml")

# load annotations
annot = pd.read_csv(config['annotation'], index_col='name')

result_path = os.path.join(config["result_path"],module_name)

# Clustering: Leiden, clustification
cluster_methods = []
clustree_content = []
clustree_metadata_content = []

## Leiden
if len(config["leiden"]["metrics"])>0 and all([leiden_metric in config["umap"]["metrics"] for leiden_metric in config["leiden"]["metrics"]]):
    cluster_methods.append("Leiden")

## clustification
if len(config["clustification"]["method"])!="" and config["clustification"]["method"] in cluster_methods:
    cluster_methods.append("clustification")

# Cluster validation
indices_external = []
indices_internal = []
    
# Dimensionality Reduction: apply PCA, UMAP and densMAP sepcific visualization flags
umap_content = ['metadata']
umap_diagnostics = []
# densmap_content = ['metadata']
pca_content = ['metadata']
pca_diagnostics = ['variance','pairs','loadings','loadings_lollipop']

if config["umap"]["connectivity"]==1:
    umap_diagnostics.append('connectivity')
#     densmap_content.append('connectivity')

if config["umap"]["diagnostics"]==1:
    umap_diagnostics.append('diagnostics')
#     densmap_content.append('diagnostics')

if len(config["features_to_plot"]) > 0:
    pca_content.append('features')
    umap_content.append('features')
#     densmap_content.append('features')

if len(cluster_methods) > 0:
    pca_content.append('clustering')
    umap_content.append('clustering')
    clustree_content.append("default")
    clustree_metadata_content.append("metadata")
    indices_external = ["AMI","ARI","FMI", "Homogeneity", "Completeness", "V"]
    indices_internal = ["Silhouette", "Calinski_Harabasz", "Dunn", "C_index", "Davies_Bouldin", "BIC"] # removed "AIC"
    
    if len(config["features_to_plot"]) > 0:
        clustree_metadata_content.append('features')
        
    if len(config["metadata_of_interest"])>0:
        clustree_content.append('custom')

ruleorder: clustification > aggregate_clustering_results
ruleorder: clustree_analysis > clustree_analysis_metadata

rule all:
    input:
        # PCA
        PCA_objects = expand(os.path.join(result_path,'{sample}','PCA','PCA_{svd_solver}_{n_components}_object.pickle'),
                                sample=list(annot.index),
                             svd_solver=config["pca"]["svd_solver"],
                             n_components=config["pca"]["n_components"],
                               ),
        PCA_plots = expand(os.path.join(result_path,'{sample}','PCA','plots','PCA_{svd_solver}_{n_components}_2','{content}'),
                            sample=list(annot.index),
                           svd_solver=config["pca"]["svd_solver"],
                             n_components=config["pca"]["n_components"],
                            content=pca_content,
                          ),
        PCA_diagnostics = expand(os.path.join(result_path,'{sample}','PCA','plots','PCA_{svd_solver}_{n_components}','diagnostics','{content}.png'),
                            sample=list(annot.index),
                                 svd_solver=config["pca"]["svd_solver"],
                             n_components=config["pca"]["n_components"],
                            content=pca_diagnostics,
                          ),
        PCA_interactive = expand(os.path.join(result_path,'{sample}','PCA','plots','PCA_{svd_solver}_{n_components}_{dim}','interactive.html'),
                            sample=list(annot.index),
                                 svd_solver=config["pca"]["svd_solver"],
                             n_components=config["pca"]["n_components"],
                            dim=[2,3]
                          ),
        # UMAP & densMAP
        MAP_graphs = expand(os.path.join(result_path,'{sample}','UMAP','UMAP_{metric}_{n_neighbors}_graph.pickle'),
                              sample=list(annot.index),
                              metric=config["umap"]["metrics"],
                              n_neighbors=config["umap"]["n_neighbors"] #max(config["umap"]["n_neighbors"])
                               ),
        MAP_objects = expand(os.path.join(result_path,'{sample}','{method}','{method}_{metric}_{n_neighbors}_{min_dist}_{n_components}_object.pickle'),
                            sample=list(annot.index),
                            method=["UMAP","densMAP"] if config["umap"]["densmap"]==1 else ["UMAP"],
                            metric=config["umap"]["metrics"],
                            n_neighbors=config["umap"]["n_neighbors"],
                            min_dist=config["umap"]["min_dist"],
                            n_components=config["umap"]["n_components"]
                               ),
        MAP_plots = expand(os.path.join(result_path,'{sample}','{method}','plots','{method}_{metric}_{n_neighbors}_{min_dist}_{n_components}','{content}'),
                            sample=list(annot.index),
                            method=["UMAP","densMAP"] if config["umap"]["densmap"]==1 else ["UMAP"],
                            metric=config["umap"]["metrics"],
                            n_neighbors=config["umap"]["n_neighbors"],
                            min_dist=config["umap"]["min_dist"],
                            n_components=2,
                            content=umap_content
                               ) if 2 in config["umap"]["n_components"] else [],
        MAP_diagnostics = expand(os.path.join(result_path,'{sample}','{method}','plots','{method}_{metric}_{n_neighbors}_{min_dist}_{n_components}','diagnostics','{content}.png'),
                            sample=list(annot.index),
                            method=["UMAP","densMAP"] if config["umap"]["densmap"]==1 else ["UMAP"],
                            metric=config["umap"]["metrics"],
                            n_neighbors=config["umap"]["n_neighbors"],
                            min_dist=config["umap"]["min_dist"],
                            n_components=2,
                            content=umap_diagnostics
                               ) if 2 in config["umap"]["n_components"] else [],
        MAP_interactive = expand(os.path.join(result_path,'{sample}','{method}','plots','{method}_{metric}_{n_neighbors}_{min_dist}_{n_components}','interactive.html'),
                            sample=list(annot.index),
                            method=["UMAP","densMAP"] if config["umap"]["densmap"]==1 else ["UMAP"],
                            metric=config["umap"]["metrics"],
                            n_neighbors=config["umap"]["n_neighbors"],
                            min_dist=config["umap"]["min_dist"],
                            n_components=[dims for dims in config["umap"]["n_components"] if dims in [2,3]]
                               ) if 2 in config["umap"]["n_components"] or 3 in config["umap"]["n_components"] else [],
        # Heatmap
        heatmap_plots = expand(os.path.join(result_path,'{sample}','Heatmap','plots','Heatmap_{metric}_{method}.png'),
                               sample=list(annot.index),
                               method=config["heatmap"]["hclust_methods"],
                               metric=config["heatmap"]["metrics"],
                          ),
        # clustree
        clustree_plots = expand(os.path.join(result_path,'{sample}','clustree','{content}.png'),
                            sample=list(annot.index),
                            content=clustree_content
                          ),
        clustree_metadata_plots = expand(os.path.join(result_path,'{sample}','clustree','{content}'),
                            sample=list(annot.index),
                            content=clustree_metadata_content
                          ),
        # cluster validation with internal and external indices
        cluster_validation = expand(os.path.join(result_path,'{sample}','cluster_validation','plots','{index_type}'),
                                             sample=list(annot.index),
                                             index_type = ["external", "internal"] if config["sample_proportion"]>0 else ["external"],
                                            ) if len(cluster_methods)>0 else [],
        envs = expand(os.path.join(result_path,'envs','{env}.yaml'),env=['clusterCrit','clustree','ComplexHeatmap','ggplot','umap_leiden','plotly','pymcdm']),
        configs = os.path.join(result_path,'configs','{}_config.yaml'.format(config["project_name"])),
        annotations = os.path.join(result_path,'configs','{}_annot.csv'.format(config["project_name"])),
    resources:
        mem_mb=1000,
    threads: config.get("threads", 1)
    log:
        os.path.join("logs","rules","all.log"),
    params:
        partition=config.get("partition"),

        
##### load rules #####
include: os.path.join("rules", "common.smk")
include: os.path.join("rules", "dimred.smk")
include: os.path.join("rules", "visualization.smk")
include: os.path.join("rules", "clustering.smk")
include: os.path.join("rules", "cluster_validation.smk")
include: os.path.join("rules", "envs_export.smk")
